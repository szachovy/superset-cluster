terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "3.0.2"
    }
  }
}

provider "docker" {
  host = "unix:///var/run/docker.sock"
}

resource "null_resource" "manage_ssh" {
  provisioner "local-exec" {
    when = create
    command = <<-EOT
      ssh-keygen -t rsa -b 2048 -f id_rsa -N ''
      chmod 600 id_rsa.pub
      echo "### Terraform autogenerated content start ###" >> $HOME/.ssh/config
    EOT
  }
  provisioner "local-exec" {
    when = destroy
    command = <<-EOT
      rm id_rsa id_rsa.pub
      sed --in-place \
        "/### Terraform autogenerated content start ###/,\
        /### Terraform autogenerated content end ###/d" \
        $HOME/.ssh/config
    EOT
  }
}

resource "docker_network" "nodes_network" {
  name   = "nodes-network"
  ipam_config {
    subnet = "172.18.0.0/16"
    gateway = "172.18.0.1"
  }
}

resource "docker_image" "node_image" {
  name = "node"
  build {
    context = "."
  }
  triggers = {
    file_sha1 = filesha1("Dockerfile")
  }
  depends_on = [
    null_resource.manage_ssh
  ]
}

resource "docker_container" "nodes" {
  count = var.nodes

  name  = "node-${count.index}"
  hostname = "node-${count.index}"
  image = docker_image.node_image.name
  privileged = true
  network_mode = docker_network.nodes_network.name

  ulimit {
    name = "nofile"
    soft = 1024
    hard = 65535
  }

  provisioner "local-exec" {
    command = <<-EOT
      echo "Host $HOSTNAME" >> $HOME/.ssh/config
      echo "  Hostname $IP_ADDRESS" >> $HOME/.ssh/config
      echo "  StrictHostKeyChecking no" >> $HOME/.ssh/config
      echo "  IdentityFile $(pwd)/id_rsa" >> $HOME/.ssh/config
    EOT
    environment = {
      HOSTNAME = "node-${count.index}"
      IP_ADDRESS = "172.18.0.${2 + count.index}"
    }
  }

  depends_on = [
    docker_image.node_image,
    docker_network.nodes_network,
    null_resource.manage_ssh
  ]
}

resource "null_resource" "finish_configuration" {
  provisioner "local-exec" {
    command = <<-EOT
      echo "### Terraform autogenerated content end ###" >> $HOME/.ssh/config
    EOT
  }
  depends_on = [ docker_container.nodes ]
}

#sed --in-place --expression "/Host $HOSTNAME/{N;N;N;d}" $HOME/.ssh/config
# resource "null_resource" "manage_ssh_config" {
#   provisioner "local-exec" {
#     command = "cat  >> b.props"
#   }
#   provisioner "local-exec" {
#     when = destroy
#     command = "rm id_rsa id_rsa.pub"
#   }
# }

      # sed "/Host $HOSTNAME/!p" $HOME/.ssh/config
      # sed "/  Hostname $IP_ADDRESS/!p" $HOME/.ssh/config
      # sed "/  StrictHostKeyChecking no/!p" $HOME/.ssh/config

      #  ex -sc "g/Host $HOSTNAME/d" -cx $HOME/.ssh/config
      # ex -sc "g/  Hostname $IP_ADDRESS/d" -cx $HOME/.ssh/config
      # ex -sc "g/  StrictHostKeyChecking no/d" -cx $HOME/.ssh/config     
# resource "null_resource" "copy_ssh_keys" {
#   count = count

#   provisioner "remote-exec" {
#     connection {
#       type     = "ssh"
#       user     = "root"
#       host     = docker_container.nodes[count.index].network_settings.0.ip_address
#       password = "your_ssh_password" # Replace with your SSH password
#       port     = 22 + count.index
#     }

#     inline = [
#       "echo '${tls_private_key.ssh_key.public_key_openssh}' >> /root/.ssh/authorized_keys"
#     ]
#   }

#   depends_on = [null_resource.manage_ssh]
# }
