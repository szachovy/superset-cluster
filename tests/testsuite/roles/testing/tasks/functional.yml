---
- name: Execute Docker commands on multiple containers
  block:
    - ansible.builtin.loop:
        start: 0
        end: 4
        step: 1
      register: node_indices
    - community.docker.docker_container_exec:
        container: "{{ node_prefix }}-{{ item.index }}"
        command: "/bin/bash -c 'docker ps -a'"
        timeout: 15
      register: docker_output
      loop: "{{ node_indices.results }}"
    - debug:
        msg: "=== {{ item.item }} ==="
        verbosity: 2
      loop: "{{ docker_output.results }}"
    - debug:
        msg: "STDOUT: {{ item.stdout_lines }}"
        verbosity: 2
      loop: "{{ docker_output.results }}"
    - debug:
        msg: "STDERR: {{ item.stderr_lines }}"
        verbosity: 2
      loop: "{{ docker_output.results }}"

- name: "install required pip packages on {{ node_prefix }}-4"
  community.docker.docker_container_exec:
    container: "{{ node_prefix }}-4"
    command: "/bin/bash -c
      'wget https://bootstrap.pypa.io/get-pip.py &&
      python3 get-pip.py &&
      pip install --no-cache-dir --user requests==2.32.3 docker==7.1.0 retry==0.9.2'"
    timeout: 15

- name: "copy superset functional tests source to the container"
  community.docker.docker_container_copy_into:
    container: "{{ node_prefix }}-4"
    path: "{{ role_path }}/files/functional_superset.py"
    container_path: "/opt/superset-cluster/src/functional_superset.py"
    timeout: 10

- name: "run superset functional tests"
  community.docker.docker_container_exec:
    container: "{{ node_prefix }}-4"
    command: "python3 -c
      'import functional_superset;
      superset_functional = functional_superset.SupersetNodeFunctionalTests(
        node_prefix=\"{{ node_prefix }}\",
        mysql_user=\"{{ mysql_user }}\",
        mysql_password=\"{{ mysql_password }}\",
        redis_hostname=\"{{ redis_hostname }}\",
        redis_port={{ redis_port }},
        celery_sql_lab_task_annotations=\"{{ celery_sql_lab_task_annotations }}\",
        celery_broker=\"{{ celery_broker }}\",
        superset_hostname=\"{{ superset_hostname }}\",
        database_name=\"{{ database_name }}\",
        superset_password=\"{{ superset_password }}\"
      );
      database_id = superset_functional.create_database_connection();
      query_dttm = superset_functional.run_query(database_id);
      superset_functional.get_query_results(query_dttm)'"
    chdir: "/opt/superset-cluster/src"
    timeout: 30

- name: "install required pip packages on {{ node_prefix }}-0"
  community.docker.docker_container_exec:
    container: "{{ node_prefix }}-0"
    command: "/bin/bash -c
      'wget https://bootstrap.pypa.io/get-pip.py &&
      python3 get-pip.py &&
      pip install --no-cache-dir --user requests==2.32.3 docker==7.1.0 retry==0.9.2'"
    timeout: 15

- name: "copy mgmt functional tests source to the container"
  community.docker.docker_container_copy_into:
    container: "{{ node_prefix }}-0"
    path: "{{ role_path }}/files/functional_mgmt.py"
    container_path: "/opt/superset-cluster/src/functional_mgmt.py"
    timeout: 10

- name: "run mgmt functional tests"
  community.docker.docker_container_exec:
    container: "{{ node_prefix }}-0"
    command: "python3 -c
      'import functional_mgmt;
      mgmt_functional = functional_mgmt.MgmtNodeFunctionalTests(
        mgmt_hostname=\"{{ mgmt_hostname }}\",
        mysql_user=\"{{ mysql_user }}\",
        mysql_password=\"{{ mysql_password }}\",
        node_prefix=\"{{ node_prefix }}\",
        after_disaster=False
      );'"
    chdir: "/opt/superset-cluster/src"
    timeout: 15

- name: Disaster testing - Stop MySQL primary node
  community.docker.docker_container:
    name: "{{ node_prefix }}-1"
    state: stopped

- name: "run mgmt functional tests after disasters"
  community.docker.docker_container_exec:
    container: "{{ node_prefix }}-0"
    command: "python3 -c
      'import functional_mgmt;
      mgmt_functional = functional_mgmt.MgmtNodeFunctionalTests(
        mgmt_hostname=\"{{ mgmt_hostname }}\",
        mysql_user=\"{{ mysql_user }}\",
        mysql_password=\"{{ mysql_password }}\",
        node_prefix=\"{{ node_prefix }}\",
        after_disaster=True
      );
      mgmt_functional.check_mysql_after_disaster();
      mgmt_functional.check_router_after_disaster()'"
    chdir: "/opt/superset-cluster/src"
  timeout: 300
