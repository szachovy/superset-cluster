---
- name: Get infos on network
  community.docker.docker_network_info:
    name: node-network
    timeout: 10
  register: result
  failed_when:
    - "result.exists == false"
    # do more

# - name: Run
#   community.docker.docker_container_exec:
#     container: "{{ container.value['Name'] }}"
#     command: "hostname"
#   register: container_hostname
#   loop: "{{ result.network.Containers | dict2items }}"
#   loop_control:
#     loop_var: container
#   failed_when: container.value['Name'] != container_hostname.stdout

- name: Get infos on container
  community.docker.docker_container_info:
    name: "{{ container.value['Name'] }}"
  register: node
  loop: "{{ result.network.Containers | dict2items }}"
  loop_control:
    loop_var: container
  failed_when:
    - container.value['Name'] != node.container.Config.Hostname
    - node.container.State.Running == false
    # do more

- name: copy
  community.docker.docker_container_copy_into:
    container: "{{ container.value['Name'] }}"
    path: "{{ item }}"
    container_path: "/root/"
  with_fileglob:
    - "{{ role_path }}/../../../../src/*"
  loop: "{{ result.network.Containers | dict2items }}"
  loop_control:
    loop_var: container
  register: service_status

# - name: Copy files into Docker container
#   community.docker.docker_container_copy:
#     container: "{{ container.value['Name'] }}"
#     src: "{{ item }}"
#     dest: "/root/{{ item | basename }}"
#   with_fileglob:
#     - "{{ role_path }}/../../../../src/*"
#   loop_control:
#     loop_var: item
#   register: copy_result

- name: introspect docker containers
  community.docker.docker_container_exec:
    container: "{{ container.value['Name'] }}"
    command: "python3 {{ role_path }}/files/introspect.py"
  loop: "{{ result.network.Containers | dict2items }}"
  loop_control:
    loop_var: container
  register: service_status

### This one work
# - name: check passwordless ssh
#   ansible.builtin.shell: "ssh root@{{ container.value['Name'] }} exit"
#   loop: "{{ result.network.Containers | dict2items }}"
#   loop_control:
#     loop_var: container
#   register: ssh_result
#   failed_when: ssh_result.rc != 0

### This one work
      # /bin/bash -c '
      # service ssh status | grep -q -v "is running" && { echo "SSH service is not running" >&2; exit 1; };
      # service docker status | grep -q -v "is running" && { echo "Docker service is not running" >&2; exit 1; };
      # if [[ "{{ container.value['Name'] }}" == "{{ node_prefix }}-$(({{ nodes }} - 1))" ]]; then \
      #   ifconfig "{{ network_interface }}" | head -n 1 | grep -q -v "*RUNNING*" && { echo "{{ network_interface }} interface is not running" >&2; exit 1; };
      # fi

      ### This one work
      # python3 -c '
      # import socket
      # [
      #   print(socket.gethostbyname("{{ node_prefix }}-" + str(node)))
      #   for node in range({{ nodes }})
      # ]
      # '

      # python3 -c ' \
      # import socket
      # [
      #   print(socket.gethostbyname("{{ node_prefix }}-" + str(node)))
      #   for node in range({{ nodes }})
      # ]
      # ' && \
  #"python3 -c 'import socket; [ print(socket.gethostbyname(\"{{ node_prefix }}-\" + str(node))) for node in range({{ nodes }}) ]'"
  # command: | 
  #     - "python3"
  #     - "-c"
  #     - "import socket; [print(socket.gethostbyname({{ node-prefix }}-{node})) for node in {{ nodes }}]"
#"/bin/bash -c 'service ssh status && service docker status && ifconfig tun0'" # true / false + multiline
# - "for $node in {{ nodes }} nslookup {{ node_prefix }}-$node"
#       - "python -c 'import socket; socket.gethostbyname(\"{{ node_prefix }}-$node")'"

# - name: Get service facts for all hosts in play
#   service_facts:
#   delegate_to: "172.18.0.2"
# - name: Print network interfaces
#   debug:
#     var: ansible_interfaces

# - name: collect facts about system services
#   service_facts:
#   register: services_state

# - name: Get infos on container
#   community.docker.docker_container_info:
#     name: node-0
#   register: result

# - name: Run
#   community.docker.docker_container_exec:
#     container: "{{ item.value['Name'] }}"
#     command: /bin/bash -c "hostname"
#   register: res
#   failed_when: "{{ item.value['Name'] }} != res.stdout"
#   loop: "{{ result.network.Containers | dict2items }}"

# - name: check passwordless connection with hostname
#   debug:
#     msg: "Value: {{ item.value['Name'] }}"
#   loop: "{{ result.network.Containers | dict2items }}"

# - name: Get info on docker host
#   community.docker.docker_host_info:
#   register: result